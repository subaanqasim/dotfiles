return {
  -- {
  --   "hrsh7th/nvim-cmp",
  --   ---@param opts cmp.ConfigSchema
  --   opts = function(_, opts)
  --     local cmp = require("cmp")
  --     local auto_select = false
  --
  --     opts.preselect = auto_select and cmp.PreselectMode.Item or cmp.PreselectMode.None
  --
  --     opts.completion = {
  --       completeopt = "menu,menuone,noinsert" .. (auto_select and "" or ",noselect"),
  --     }
  --
  --     opts.mapping = cmp.mapping.preset.insert({
  --       ["<C-b>"] = cmp.mapping.scroll_docs(-4),
  --       ["<C-f>"] = cmp.mapping.scroll_docs(4),
  --       ["<C-n>"] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
  --       ["<C-p>"] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
  --       ["<C-Space>"] = cmp.mapping.complete(),
  --       ["<CR>"] = LazyVim.cmp.confirm({ select = auto_select }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
  --       ["<C-y>"] = LazyVim.cmp.confirm({ select = true }),
  --       ["<S-CR>"] = LazyVim.cmp.confirm({ behavior = cmp.ConfirmBehavior.Replace }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
  --       ["<C-CR>"] = function(fallback)
  --         cmp.abort()
  --         fallback()
  --       end,
  --       ["<tab>"] = function(fallback)
  --         return LazyVim.cmp.map({ "snippet_forward", "ai_accept" }, fallback)()
  --       end,
  --     })
  --
  --     opts.window = {
  --       completion = cmp.config.window.bordered(),
  --       documentation = cmp.config.window.bordered(),
  --       -- completion = {
  --       --   border = border("CmpBorder"),
  --       -- },
  --       -- documentation = {
  --       --   border = border("CmpDocBorder"),
  --       -- },
  --     }
  --   end,
  -- },
}
